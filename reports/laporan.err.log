Traceback (most recent call last):
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\atsuga\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import math

# Prediction Index
index_Close = new_df.columns.get_loc("Close")

train_data_len = math.ceil(np_data_scaled.shape[0] * 0.8)

# Create the training and test data
train_data = np_data_scaled[0:train_data_len, :]
test_data = np_data_scaled[train_data_len - sequence_length:, :]

# The RNN needs data with the format of [samples, time steps, features]
# Here, we create N samples, sequence_length time steps per sample, and 6 features
def partition_dataset(sequence_length, data):
    x, y = [], []
    data_len = data.shape[0]
    for i in range(sequence_length, data_len):
        x.append(data[i-sequence_length:i,FEATURES]) #contains sequence_length values 0-sequence_length * columsn
        y.append(data[i, index_Close]) #contains the prediction values for validation,  for single-step prediction
    
    # Convert the x and y to numpy arrays
    x = np.array(x)
    y = np.array(y)
    return x, y

# Generate training data and test data
x_train, y_train = partition_dataset(sequence_length, train_data)
x_test, y_test = partition_dataset(sequence_length, test_data)

# Print the shapes: the result is: (rows, training_sequence, features) (prediction value, )
print(x_train.shape, y_train.shape)
print(x_test.shape, y_test.shape)

# Validate that the prediction value and the input match up
# The last close price of the second input sample should equal the first prediction value
print(x_train[1][sequence_length-1][index_Close])
print(y_train[0])
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mIndexError[0m                                Traceback (most recent call last)
Cell [1;32mIn[16], line 27[0m
[0;32m     24[0m     [38;5;28;01mreturn[39;00m x, y
[0;32m     26[0m [38;5;66;03m# Generate training data and test data[39;00m
[1;32m---> 27[0m x_train, y_train [38;5;241m=[39m [43mpartition_dataset[49m[43m([49m[43msequence_length[49m[43m,[49m[43m [49m[43mtrain_data[49m[43m)[49m
[0;32m     28[0m x_test, y_test [38;5;241m=[39m partition_dataset(sequence_length, test_data)
[0;32m     30[0m [38;5;66;03m# Print the shapes: the result is: (rows, training_sequence, features) (prediction value, )[39;00m

Cell [1;32mIn[16], line 18[0m, in [0;36mpartition_dataset[1;34m(sequence_length, data)[0m
[0;32m     16[0m data_len [38;5;241m=[39m data[38;5;241m.[39mshape[[38;5;241m0[39m]
[0;32m     17[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(sequence_length, data_len):
[1;32m---> 18[0m     x[38;5;241m.[39mappend([43mdata[49m[43m[[49m[43mi[49m[38;5;241;43m-[39;49m[43msequence_length[49m[43m:[49m[43mi[49m[43m,[49m[43mFEATURES[49m[43m][49m) [38;5;66;03m#contains sequence_length values 0-sequence_length * columsn[39;00m
[0;32m     19[0m     y[38;5;241m.[39mappend(data[i, index_Close]) [38;5;66;03m#contains the prediction values for validation,  for single-step prediction[39;00m
[0;32m     21[0m [38;5;66;03m# Convert the x and y to numpy arrays[39;00m

[1;31mIndexError[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices

